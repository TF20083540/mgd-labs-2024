--[[ 
=============================================================================================

Lua Script File:  cursor.script

Script Summary: This script provides the logic that enables a user to select one of the 
spawned game objects and drag/drop it somewhere else within the game world.

	=============================================================================================
	--]]

	-- ------------------------------------------------------------------------------------------
	-- The init() function is executed when the cursor game object is initialized at game start
	-- ------------------------------------------------------------------------------------------
	function init(self)

		-- The 'acquire_input_focus' message directs this cursor GameObject to 
		-- 'listen' to inputs, e.g, a touch or a mouse button press
		msg.post(".", "acquire_input_focus")


		-- Initializing a series of Script Properties - as control variables
		self.collision_id = nil     -- id of gameobject which the cursor collided with
		self.dragged_id = nil       -- id of gameobject currently being dragged
		self.dragged_pos = nil		-- The position of the dragged_id game object
		self.pressed = false		-- Binary flag indicating if the user has touched the screen
		-- or pressed the mouse button
	end


	-- -------------------------------------------------------------------------------------------
	-- The update() function is called once each frame; 'dt' is the time difference 
	-- since the last frame
	-- -------------------------------------------------------------------------------------------
	function update(self, dt)
		-- Set the render clear color--aka, screen color when nothing is rendered
		msg.post("@render:", "clear_color",
		{ color = vmath.vector4(95 /256, 129 / 256, 161 / 256, 1 ) })

		-- Get the current position of the cursor
		local pos = go.get_position()

		-- Set the label to echo the cursor position (pos.x and pos.y)
		label.set_text("#cursorLabel", "---- x: " .. pos.x .. "  y: " .. pos.y)

		-- Reset the control variable for collision_id each frame
		self.collision_id = nil
	end


	-- -------------------------------------------------------------------------------------------
	-- The on_message() callback function is engaged by the Game Engine every time a message has 
	-- been sent to its script component 
	-- -------------------------------------------------------------------------------------------
	function on_message(self, message_id, message, sender)

		-- When a collision message is received -- set self.collision_id to the id of 
		-- the top-most game object which is pointed to (aka, colliding with) the cursor object
		if message_id == hash("collision_response") then
			if not self.collision_id or
			go.get_position(self.collision_id).z < message.other_position.z then
				self.collision_id = message.other_id
			end
		end
	end


	-- -------------------------------------------------------------------------------------------
	-- The on_input() function receives input actions dispatched from the Defold Game Engine
	-- -------------------------------------------------------------------------------------------
	function on_input(self, action_id, action)

		-- Only process inputs which reflect a 'touch action' as defined within game.input_bindings
		if not action_id or action_id == hash("touch") then

			-- Update the Defold cursor Game Object position to be the same as the current 
			-- position of the machine cursor
			local action_pos = vmath.vector3(action.x, action.y, 0)
			go.set_position(action_pos)

			-- Revise script control variables; click/touch -- as pressed or released 
			if action.pressed then
				-- When the action reflects a press
				msg.post("#collisionobject", "enable")
				self.pressed = true
				print("Thomas Farrell - 20083540")

			elseif action.released then
				-- When the action reflects a release
				msg.post("#collisionobject", "disable")
				self.pressed = false
				self.dragged_id = nil
				self.dragging = false

				-- Reset the scale to 1.0 on Selected GameObject when released
				local s1 = vmath.vector3(1.0, 1.0, 1.0)
				go.set_scale(s1, self.collision_id)
			end

			-- Upon a Click/Touch -- if the cursor has collided with another GameObject and
			-- is not already dragging another GameObject -- then set dragged_id / dragged_pos
			-- to the new GameObject's id

			if self.pressed and self.collision_id and not self.dragged_id then
				self.dragged_id = self.collision_id
				self.dragged_pos = action_pos

				-- Increase Scale for selected GameObject when selected
				local s2 = vmath.vector3(1.2, 1.2, 1.0)
				go.set_scale(s2, self.collision_id)
			end

			-- Set self.dragging to true if user has clicked a GameObject and moves it
			if self.dragged_id and vmath.length(self.dragged_pos - action_pos) > 20 then
				self.dragging = true
			end

			-- Update the position of a dragged GameObject
			if self.dragging then
				go.set_position(action_pos, self.dragged_id)
			end
		end
	end
	